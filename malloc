#include <stdio.h>
#include <time.h>
#include <assert.h>
#include <unistd.h>
int binsearch(int x,int v[],int n){
    int low = 0;
    int high =n-1;
    int mid;
    while(low<= high){
        mid= (low+high)/2;
        if (x< v[mid])
            high=mid-1;
        else if (x > v[mid])
            low=mid+1;
        else
            return mid;
    }

    return -1;
}
int binsearch2(int x,int v[],int n){
    int low = 0;
    int  high =n-1;
    int mid = (low+high)/2;
    while(low<=high && v[mid]!=x){
        if (x< v[mid])
            high=mid-1;
        else if (x > v[mid])
            low=mid+1;
         mid= (low+high)/2;
    }
    if (x==v[mid])
        return mid;
    else return -1;
}
/*
int get_array(int size, int** ptr)
{
    int *x = (int*)malloc(size);
    *ptr = x;
    return 0;
}

void f(void)
{
    int *array = 0;
    get_array(7,&array);
}
*/

int* create_array(int numbers){
    int i;
    printf("num=%d\n",numbers);
    int* ar=malloc(numbers*sizeof(int));   // маллок выделяет байты, нам надо число умножить на 4
   //при этом int* вначале говорит, как компиляру надо интерпиритировтаь выделенную память
    assert(ar!=0);
    printf("num=%d\n",numbers);
    for(i=0;i<numbers;++i){
        ar[i]=i;
        printf("%d\n",ar[i]);
    }
    printf("%p\n",ar);
    return ar;
    //free(ar);
}

void main(){
    int *a = create_array(10);
    printf("%p\n",a); //а содержит адрес ar, действительно
    free(a);  //почему не хочет очищать?

    volatile int i;
    volatile aa=0;
    int start,stop;
    start = clock();
    printf("%d\n",start);
    for(i=0;i<500000;i++)
    {
        aa++;
    }
    aa+=1000;
    sleep(5);
    printf("%d\n",aa);
    stop = clock();
    printf("%d\n",stop);
    float xxx = 1.0/CLOCKS_PER_SEC;
    printf("%.2f\n",(stop-start)*xxx);


}
